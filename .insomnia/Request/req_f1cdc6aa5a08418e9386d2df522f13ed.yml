_id: req_f1cdc6aa5a08418e9386d2df522f13ed
type: Request
parentId: fld_38488706918545bb8a8de057d183650d
modified: 1675455642
created: 1675455642
url: https://{{ _.base_url }}/api/{{ _.api_version }}/graphql.json
name: Filter products in collection
description: ""
method: POST
body:
  mimeType: application/graphql
  text: '{"query":"# You can use the Storefront API to filter products in a
    collection using product filters.\n\n# This functionality lets you build a
    desired customer experience on a storefront, such as the ability to narrow
    down the search results that you display to customers.\n\n# Products in
    collections can be filtered by type, vendor, variant options, price, stock
    and metafield value.\n\n# Please note there are requirements to using
    product filters in collections here -
    https://shopify.dev/custom-storefronts/products-collections/filter-products#requirements\n\n#
    In the following example, products in the collection that have the \"shoes\"
    product type are returned.\n\n# Further examples of product filters can be
    found in the above documentation.\n\nquery
    getProductsOfProductTypeInCollection($handle: String!, $value: String!)
    {\n\tcollection(handle: $handle) {\n\t\thandle\n\t\tproducts(first: 10,
    filters: { productType: $value }) {\n\t\t\tedges {\n\t\t\t\tnode
    {\n\t\t\t\t\thandle\n\t\t\t\t\tproductType\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","variables":"{\n  \"handle\":
    \"filterable-collection\",\n\t\"value\": \"shoes\"\n}\n"}'
parameters: []
headers:
  - name: Content-Type
    value: application/json
    id: pair_1
  - name: X-Shopify-Storefront-Access-Token
    value: "{{ _.storefront_access_token }}"
    description: ""
    id: pair_2
authentication: {}
metaSortKey: 5
isPrivate: false
settingStoreCookies: false
settingSendCookies: false
settingDisableRenderRequestBody: false
settingEncodeUrl: true
settingRebuildPath: true
settingFollowRedirects: global
